<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cryptography | Luminolt</title><link>https://example.com/tag/cryptography/</link><atom:link href="https://example.com/tag/cryptography/index.xml" rel="self" type="application/rss+xml"/><description>Cryptography</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 17 Jul 2022 16:34:34 +0800</lastBuildDate><image><url>https://example.com/media/icon_hu1b90dea3b5752ec4ed6154c0dc881a21_30314_512x512_fill_lanczos_center_3.png</url><title>Cryptography</title><link>https://example.com/tag/cryptography/</link></image><item><title>Note - HE-Based PPML</title><link>https://example.com/post/note-ppml/</link><pubDate>Sun, 17 Jul 2022 16:34:34 +0800</pubDate><guid>https://example.com/post/note-ppml/</guid><description>&lt;p>本文为基于同态性质的PPML方案的综述，以下为主要参考文献的信息：&lt;/p>
&lt;blockquote>
&lt;p>Article: Efficient Dropout-resilient Aggregation for Privacy-preserving Machine Learning&lt;/p>
&lt;p>Journal: TIFS (IEEE Transactions on Information Forensics and Security)&lt;/p>
&lt;p>Author: Ziyao Liu, Jiale Guo, Kwok-Yan Lam, Jun Zhao&lt;/p>
&lt;p>Date: AUGUST 2021&lt;/p>
&lt;/blockquote>
&lt;h1 id="1-background">1. Background&lt;/h1>
&lt;p>机器学习是目前信息技术的一个主要方向，其要求数据量巨大的特性造成了对于用户共享数据集的需求。而为了保护用户的数据隐私，隐私保护机器学习（Privacy-preserving Machine Learning, PPML）近年来受到关注。&lt;/p>
&lt;p>在大规模机器学习中，用户或设备随时会退出（dropout），本文对此提出了一种可扩展的隐私聚合方案，通过同态伪随机数生成器（Homomorphic Pseudorandom Generator, HPRG）、Shamir秘密共享和数字签名方案，构建了一种PPML方案。该方案的特点包括：&lt;/p>
&lt;ul>
&lt;li>动态性：用户或设备可以随时退出；&lt;/li>
&lt;li>安全性：可抵抗半诚实用户和恶意敌手的攻击；&lt;/li>
&lt;li>高效性：相较于传统方案（SecAgg）更快。&lt;/li>
&lt;/ul>
&lt;h3 id="compare">Compare&lt;/h3>
&lt;p>以下为以往工作的一些特点：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Article Name&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Privacy-preserving stream aggregation with fault tolerance&lt;/td>
&lt;td>阈值HE，高开销的building block，对大规模PPML不现实&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Privacy-preserving deep learning via additively homomorphic encryption&lt;/td>
&lt;td>比上述高效，但存在梯度泄露&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mpc-enabled privacypreserving neural network training against malicious attack&lt;/td>
&lt;td>依靠MPC，DNN的通信开销很大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Aby3: A mixed protocol framework for machine learning&lt;/td>
&lt;td>服务器辅助MPC，但对于单个服务器不能保证非共谋性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Falcon: Honest-majority maliciously secure framework for private deep learning&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Practical secure aggregation for privacy-preserving machine learning&lt;/td>
&lt;td>pair-wise DH，抗退出（弹性）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>名词缩写&lt;/p>
&lt;p>HE：同态加密；MPC：多方安全计算；DNN：深度神经网络；DH：Diffie-Hellman&lt;/p>
&lt;/div>
&lt;/div>
&lt;h1 id="2-protocol">2. Protocol&lt;/h1>
&lt;p>此处会提及两篇文章的内容，为方便下做简称：&lt;/p>
&lt;ul>
&lt;li>EDRAgg：即本文的主要参考文献，Efficient Dropout-resilient Aggregation for Privacy-preserving Machine Learning&lt;/li>
&lt;li>SecAgg：来自Google的最早的方案，Practical secure aggregation for privacy-preserving machine learning&lt;/li>
&lt;/ul>
&lt;h2 id="21-masking-model">2.1 Masking Model&lt;/h2>
&lt;p>首先需要明确我们的目标。在目前的研究中，PPML的底层是由安全聚合协议支持的。在该环境下，我们进行如下的定义：&lt;/p>
&lt;p>设存在用户集 $\mathcal{U}$ 和服务器集 $\mathcal{S}$，用户$u_i\in \mathcal{U}$拥有的ML模型参数记作$\boldsymbol{x_i}$，则安全聚合的目标是在不泄露 $\boldsymbol{x_i}$ 的任何信息的情况下，使得服务器获得聚合参数 $\boldsymbol{y} = \sum_{u_i \in \mathcal{U}} \boldsymbol{x_i}$ 。&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>🤔此处“不泄露”针对的是 $o_j \in \mathcal{U} \cup \mathcal{S} \backslash \{u_i\}$&lt;/p>
&lt;p>类似完美安全性，$o_j$在协议前后的视角不变（同分布）&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="an-example">An Example&lt;/h3>
&lt;p>此处我们考虑两个用户，一个服务器的情况，即 $\mathcal{U} = \{u_1,u_2\}$，$\mathcal{S} = \{s\}$。&lt;/p>
&lt;p>此时，想要不泄露任何信息，可让用户对自己的模型参数加上遮罩（mask），再使服务器能够消除遮罩即可。我们将遮罩记作$\boldsymbol{r_i}$，则有：&lt;/p>
&lt;p>$$
\boldsymbol{y_i} = \boldsymbol{x_i} + \boldsymbol{r_i}
$$&lt;/p>
&lt;p>于是对于两个用户的情况如下图所示，此处$r_i$为随机选取的随机数：&lt;/p>
&lt;img src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com/img/20220728080035.png" style="zoom: 33%;" />
&lt;p>此时，只需要服务器能过获得$\sum \boldsymbol{r} =\boldsymbol{r_1} + \boldsymbol{r_2}$，就可以消除遮罩，但显然这又变成了一个安全聚合问题。此时一个巧妙的方法是让$\sum \boldsymbol{r} =0$，即$\boldsymbol{r_1} =- \boldsymbol{r_2}$，对于该情况，可以让$u_1$向$u_2$发送$\boldsymbol{r_1}$，如图：&lt;/p>
&lt;img src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com/img/image-20220728081126187.png" alt="image-20220728081126187" style="zoom: 50%;" />
&lt;p>此时，$\boldsymbol{y_1}+\boldsymbol{y_2}$恰为$\boldsymbol{x_1}+\boldsymbol{x_2}$，且服务器从$\boldsymbol{y_1},\boldsymbol{y_2}$不能获得与$\boldsymbol{x_1},\boldsymbol{x_2}$相关的任何信息。&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
需注意的是，此处要求$len(\boldsymbol{r_i})\geq len(\boldsymbol{x_i})$，即满足One-time Pad，具有完美安全性。
&lt;/div>
&lt;/div>
&lt;p>但随之而来，会发现有一个问题，由于$u_2$从$u_1$处获得了$\boldsymbol{r_1}$，如果$u_2$和服务器$s$共谋，则可以还原$\boldsymbol{x_1}=\boldsymbol{y_1}-\boldsymbol{r_1}$，从而导致$u_1$的ML模型参数泄露。有什么方法可以让$u_1,u_2$双方共享一个数，并且不能被别人获取呢？此处就需要引入SecAgg的工作，巧妙利用Diffie-Hellman密钥交换算法来完成目标。&lt;/p>
&lt;p>此处我们省去关于DH密码学原语的详细说明，观察下图不难发现DH天然的给出了一个双方共享的数$g^{ab}$，且由于计算该数$g^{ab}=(g^a)^b=(g^b)^a$，要求一方的公钥和另一方的私钥，不会把信息泄露给第三方。&lt;/p>
&lt;img src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com/img/image-20220728082043225.png" alt="image-20220728082043225" style="zoom:33%;" />
&lt;p>这就得到了一个基于DH的安全聚合方法（作者称该过程为 pair-wise DH）。&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
由于显然存在可逆映射$F:\mathbb{Z}_p^k\rightarrow \mathbb{Z}_p$将参数向量降维，此处将$\boldsymbol{r_i}$ 规约到 $\mathbb{Z}_p$上，下同理。
&lt;/div>
&lt;/div>
&lt;h3 id="further-example-more-users">Further Example, More Users&lt;/h3>
&lt;p>我们进一步扩展用户集的数量至3人，该方法是否还可行呢？&lt;/p>
&lt;img src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com/img/image-20220728082623247.png" alt="image-20220728082623247" style="zoom:33%;" />
&lt;p>我们可以从$u_1$的视角考虑：&lt;/p>
&lt;img src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com/img/image-20220728082755491.png" alt="image-20220728082755491" style="zoom:33%;" />
&lt;p>用户$u_1$除了自己的私钥$a$外，还可以得知$u_1,u_2,u_3$的公钥$g^a,g^b,g^c$，于是相关可计算$g^{ab},g^{ac}$。我们不妨使$u_1$的mask恰为$r_1=g^{ab}+g^{ac}$，那么与之对应在计算$u_2$的mask时，由于需要和$g^{ab}$配对相消，使之为$r_2=-g^{ab}+g^{bc}$，$u_3$同理，如图所示。&lt;/p>
&lt;img src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com/img/image-20220728083114276.png" alt="image-20220728083114276" style="zoom:50%;" />
&lt;p>不难归纳出该方法的计算公式：
$$
y_i=x_i+\sum_{i&amp;lt;j}g^{sk_isk_j}-\sum_{i&amp;gt;j}g^{sk_isk_j}
$$
则显然：
$$
y=\sum_{u_i\in\mathcal{U}}{y_i}=\sum_{u_i\in\mathcal{U}}{\left(x_i+\sum_{i&amp;lt;j}g^{sk_isk_j}-\sum_{i&amp;gt;j}g^{sk_isk_j}\right)}=\sum_{u_i\in\mathcal{U}}{x}
$$&lt;/p>
&lt;h3 id="another-method">Another Method&lt;/h3>
&lt;p>（待更新……）&lt;/p>
&lt;h2 id="22-security-analysis">2.2 Security Analysis&lt;/h2>
&lt;p>（待更新……）&lt;/p>
&lt;h1 id="3-summary">3. Summary&lt;/h1>
&lt;p>（待更新……）&lt;/p>
&lt;!-- $\boldsymbol{R}=\sum r_i=\mathcal{F}(\boldsymbol{R}^1,\boldsymbol{R}^2,\cdots,\boldsymbol{R}^n)$ --></description></item><item><title>A Guide for Newbies in Cryptography</title><link>https://example.com/post/cryptography-guide/</link><pubDate>Tue, 21 Jun 2022 18:52:53 +0800</pubDate><guid>https://example.com/post/cryptography-guide/</guid><description>&lt;h2 id="什么是密码学">什么是密码学？&lt;/h2>
&lt;p>密码学是数学和计算机科学的交叉学科。在国内一般作为
信息安全专业的必修课程。密码学的开端是Shannon在1945年发表的《Communication Theory of Secrecy Systems》而在这之前，密码更像是一种技艺（Art）而非一种科学技术（Technique）。&lt;/p>
&lt;blockquote>
&lt;p>You can check the &lt;a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener">Wiki Page&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;p>按照Shannon理论，密码学可分为两个阶段：&lt;/p>
&lt;ul>
&lt;li>古典密码学：基于巧妙构造形成的Art&lt;/li>
&lt;li>现代密码学：基于数学原理形成的Technique&lt;/li>
&lt;/ul>
&lt;h2 id="古典密码学">古典密码学&lt;/h2>
&lt;p>一种比较有趣的，并且能在影视剧中看到的古典密码叫做滚筒密码。滚筒密码的加密原理就是双方规定好木棍的直径，写信人把腰带绑在木棍上书写，在收信人收到信之后，只需要把腰带绑到相同规格的木棍上就能还原信的内容。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://nic.sdufe.edu.cn/__local/3/B1/28/67F57C5431D87E41BCC727F9364_90183162_2CDE.jpg" alt="滚筒密码" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>如果用现代密码学的语言去描述，信件的内容即为明文，通过滚筒写出来的纸片就是明文，而密钥就是那根木棍。&lt;/p>
&lt;p>而实质上我们可以发现，我们是在对一个字符串间隔取字符：
例如对串：&lt;code>Hello-Crypto!&lt;/code>，我们把他写在正四棱柱形成的纸带上，就可以获得：&lt;code>Hoy!e-plCtlro&lt;/code>，而这和隔4个字符1取的操作是一样的，我们可以给出一个形式化的代码实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">splitted_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nb">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">splitted_str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">iter&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nb">iter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">cipher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">cipher&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">splitted_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello-Crypto!&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Hoy!e-plCtlro&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而事实上，这就是一个栅栏密码，你可以在&lt;a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">这个网站&lt;/a>上尝试。&lt;/p>
&lt;blockquote>
&lt;p>解密过程偷懒不写啦，聪明如你一定能自己figure out!&lt;/p>
&lt;/blockquote>
&lt;p>而这就是古典密码学从最原始的的阶段，步入了近现代的阶段。从一些工具的使用，变成了算数。在此基础上形成了大量的替换密码（如Caesar密码、Vigenère密码）。&lt;/p>
&lt;blockquote>
&lt;p>事实上computer最早的含义是计算员，大多都是一些熟练算术技巧的人来破译密码的，而我们熟知的Alan Turing事实上在二战时也是负责这个工作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="现代密码学">现代密码学&lt;/h2>
&lt;p>现代密码学的开端是Shannon的那篇文章，其中提出了一个重要的概念，完美安全性（Perfect Security）。完美安全性的形式化定义用到了概率论的知识，因此此处不展开。我们仅对其产生的原因进行一些阐述。&lt;/p>
&lt;p>古典密码在当时基本全都被破解了，密码欠缺一个正式的、准确的定义去衡量证明一个密码方案是否具有严格的安全性，因此Shannon理论应运而生。&lt;/p>
&lt;p>一个密码体系保证完美安全性，当其加密后的密文不会透露任何关于明文的信息。而在这种定义下，即使攻击者拥有无穷的算力，也不能被破解。&lt;/p>
&lt;blockquote>
&lt;p>😮注意，是无穷的算力！&lt;/p>
&lt;/blockquote>
&lt;p>但是根据Shannon的推论，一个保证完美安全性的密码体系，其密钥空间一定大于明文空间。也就是说，我的密钥不会比明文更短。而我们可以思考，如果有一个信道，可以安全的用于传输密钥，为什么不直接拿来传输明文呢？因此目前的密码体系都&lt;strong>不保证&lt;/strong>完美安全性。&lt;/p>
&lt;p>而在这基础上，就催生了流密码和分块密码，他们被统称为对称密码学。总的来说，对称密码学致力于让短密钥经过一些神奇的操作，也可以发挥和长密钥相同的作用：&lt;/p>
&lt;ul>
&lt;li>流密码：通过随机数生成器序列，生成长密钥&lt;/li>
&lt;li>分块密码：通过对明文分块，逐一用短密钥加密&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>此处是非常不严谨的表达，仅作为理解&lt;/p>
&lt;/blockquote>
&lt;p>而与之对应的，是非对称密码学（又称为公钥密码学），该类密码体系的特点是拥有公钥和私钥两个密钥，他们往往基于数学上的难题进行规约：&lt;/p>
&lt;ul>
&lt;li>RSA：大数质因数分解难题&lt;/li>
&lt;li>ElGamal：模乘群上的离散对数问题&lt;/li>
&lt;li>ECC-ElGamal：椭圆曲线加法群上的离散对数问题&lt;/li>
&lt;/ul>
&lt;p>一个简单的例子是，给定两个大质数$p, q$，给你他们的乘积$N = pq$，你是很难分别求解出$p$和$q$的。&lt;/p>
&lt;blockquote>
&lt;p>😈试试吧！N = 115157048927615167000080222307830600550443405087336034834570254657109854848846966155326673813367130632850579378687042597345617010423842872052308839845927421052730005967200985762648016655477422221735535543563770813175765249421783025141172284969133662823566566070113584080582203941254237438639149018559749238997&lt;/p>
&lt;/blockquote>
&lt;p>而这种数学上的难解特性就可以被利用，构造密码体系。&lt;/p>
&lt;blockquote>
&lt;p>具体需要一些数论和抽象代数的知识，这里就不展开啦~&lt;/p>
&lt;/blockquote>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>事实上，上面两个问题都只解决了数据隐秘性的保护，不一定能够保证数据仍是完整的、未被篡改过的。而这就需要更多的知识，包括：&lt;/p>
&lt;ul>
&lt;li>消息认证码&lt;/li>
&lt;li>数字签名&lt;/li>
&lt;/ul>
&lt;p>而目前随着量子计算机的出现，Shor算法已经从理论上证明了能够在多项式时间内攻破目前常见的密码体系，于是又有了一些后量子密码学的研究：&lt;/p>
&lt;ul>
&lt;li>格密码学&lt;/li>
&lt;li>编码密码学&lt;/li>
&lt;/ul>
&lt;p>当然还有一些和其他方向的交叉，如：&lt;/p>
&lt;ul>
&lt;li>区块链（散列和共识机制）&lt;/li>
&lt;li>安全多方计算（联邦学习）&lt;/li>
&lt;li>零知识证明&lt;/li>
&lt;/ul>
&lt;h2 id="学习路线">学习路线&lt;/h2>
&lt;p>笔者的学习路线是：密码基础-数学基础-现代密码学，比较诡异，下面整理一下比较正常的路线：&lt;/p>
&lt;ol>
&lt;li>数学基础：离散数学、数论、近世代数、概率论&lt;/li>
&lt;li>古典密码学：了解代换密码&lt;/li>
&lt;li>对称密码学：流密码、对称密码、PRG、PRF&lt;/li>
&lt;li>非对称密码学：Diffie-Hellman密钥交换、陷门函数、RSA、ElGamal、同态加密&lt;/li>
&lt;li>应用密码学：哈希函数、消息认证码、数字签名&lt;/li>
&lt;/ol>
&lt;p>推荐一些书目：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.cs.umd.edu/~jkatz/imc.html#:~:text=Introduction%20to%20Modern%20Cryptography%20is%20an%20introductory-level%20treatment,without%20sacrificing%20rigor%20or%20an%20emphasis%20on%20foundations." target="_blank" rel="noopener">Introduction to Modern Cryptography&lt;/a>, Jonathan Katz and Yehuda Lindell&lt;/li>
&lt;li>初等数论, 潘承洞、潘承彪&lt;/li>
&lt;li>抽象代数学, 姚慕生&lt;/li>
&lt;/ul></description></item></channel></rss>