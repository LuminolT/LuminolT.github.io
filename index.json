[{"authors":null,"categories":null,"content":"Luminol is a undergraduate of cyberspace security of Shanghai University. His research interests include modern cryptography (mainly on privacy-preserved computation).He is the leader of Cake1salie, a CTF team of Shanghai University.\nSkills 🗣️ Language: Chinese (native), English (fluent, passed CET-6) 💻 Coding: Python (proficient); C/C++, Go (competent) ","date":1655808773,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1655808773,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Luminol is a undergraduate of cyberspace security of Shanghai University. His research interests include modern cryptography (mainly on privacy-preserved computation).He is the leader of Cake1salie, a CTF team of Shanghai University.","tags":null,"title":"Luminol Chen","type":"authors"},{"authors":null,"categories":null,"content":"本项目为面向上海大学网络空间安全专业本科生（2020级、2021级）的暑期实训课程。 内容包括：\n密码和编码 近世代数和数论 非对称密码 Challenges Repository 本课程相关材料均已在 GitHub-LuminolT/security-summercamp 备份。\nChallenges Chal1. 套娃 本题共 3 个 flag flag 形式均为：\u0026#39;flag{[0-9A-Za-z=_]*}\u0026#39; 新佛曰：諸隸僧降冥吽諸陀摩隸僧缽冥薩願耨咤陀願羅咤喃迦祗蜜耨阿嚤僧喼所聞薩闍嚩聞念須亦心耨冥心阿冥聞慧蜜咤冥心念訶冥嚩冥聞冥念降咤冥劫耨降寂願慧般祗闍隸冥修阿闍莊陀冥莊冥劫莊嚴冥宣隸阿摩嚩蜜心咒冥闍我須咒慧冥闍諦羅迦聞慧婆劫嘚慧咒迦慧慧我慧冥闍念劫嘇隸蜜祗伏嚤慧咒修缽聞色祗冥闍僧嘚迦降阿莊冥慧聞蜜降咤寂波嘇塞薩如囑\nChal2. ezRSA 本题共 1 个 flag flag 形式为：\u0026#39;flag{[0-9A-Za-z=_]*}\u0026#39; from Crypto.Util.number import getPrime, bytes_to_long from gmpy2 import is_prime, invert from typing import Tuple from secert import flag def gen_rsa_param() -\u0026gt; Tuple[int, int, int, int, int]: \u0026#34;\u0026#34;\u0026#34;Generate usable RSA parameters. params: None return: a tuple, including `p, q, n, e, d` \u0026#34;\u0026#34;\u0026#34; p = getPrime(256) q = p + 2 while True: q += 2 if is_prime(q): break assert p \u0026lt; q n = p * q phi_n = (p-1) * (q-1) e = 0x10001 d = invert(e, phi_n) return p, q, n, e, d def rsa_encrypt(m: str, *args) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Generate usable RSA parameters. params: m: message to be encrypted args: RSA parameters return: a string, which is the encrypted message \u0026#34;\u0026#34;\u0026#34; assert len(args) == 5 p, q, n, e, d = args m = bytes_to_long(m) c = pow(m, e, n) return c params = gen_rsa_param() print(rsa_encrypt(flag, *params)) print(params[2]) # 5796768148637887491255587039409951397511832995737366433505141785703232675749200657380232851343254281355390391562734825283953711907092653161783752372166386 # 7948512242985881433771203281939490726039994357587772712416312873824297606161653053722572268861029945737411249803561023517431875922105282741637330609169129 ","date":16848e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":16848e5,"objectID":"f86cbf976198f6d70a0962cc0849f393","permalink":"https://example.com/project/2023-summer-crypto-project/","publishdate":"2023-05-23T00:00:00Z","relpermalink":"/project/2023-summer-crypto-project/","section":"project","summary":"A series of Cryptography courses to SHU's students","tags":["Cryptography"],"title":"2023 Crypto Camp","type":"project"},{"authors":[],"categories":[],"content":" A Brief Introduction to Cryptography in CTF Games Chenghao Chen | 2022.6\nShanghai University\nOutline?! 密码和编码 古典密码学 对称密码学 Hash 函数 近世代数和数论 非对称密码 范畴论和同态加密 格论和格密码 Outline 密码和编码 近世代数和数论 非对称密码-RSA Challenges L1. 密码和编码 实际上是一个引言，并且介绍了 ancient 神必编码\n1.1 一些会被搞混的术语 密码（Cryptography）：用于保护信息安全的过程 Encrypt(k, m) Decrypt(k, c) 编码（Code Theory）：信息转换为不同形式的过程 Encode(m) Decode(e) 口令（Password）：用户登录的凭证 散列（Hash）：（抗碰撞的）单向的压缩函数 1.2 常见编码方法 实用编码方法：\n字符编码：ASCII, Unicode 二进制数据编码：base, Hex URL编码：e.g. \u0026#39; \u0026#39; -\u0026gt; %20 玩具编码方法：\n与佛论禅：e.g. 佛曰：俱利知曳罰陀那無呐諦梵多不僧室得諳有呐跋姪阿 兽音译者：e.g. ~呜嗷呜呜呜呜~啊啊啊啊 1.2.1 字符编码转换错误 （一种比较古老的题目）\n古早的时候编码标准不统一，会产生乱码 GBK, BIG5, UTF-8 e.g.: （打开编码 UTF-8）��ѽѽѽѽѽѽ （实际编码GBK）哇呀呀呀呀呀呀 1.2.2 锟斤拷 Replacement Character � 🤔 锟斤拷\n\u0026gt; \u0026#39;�\u0026#39;.encode(\u0026#39;utf-8\u0026#39;) b\u0026#39;\\xef\\xbf\\xbd\u0026#39; \u0026gt; \u0026#39;锟斤拷\u0026#39;.encode(\u0026#39;gbk\u0026#39;) b\u0026#39;\\xef\\xbf\\xbd\\xef\\xbf\\xbd\u0026#39; 🤷随着文本替换，信息丢失 1.2.3 base64 base64\n二进制-文本间的编码方法 64个编码字符（\u0026#39;A-Za-z0-9+/\u0026#39;） $64 = 2^6$，因而 base64 编码的码字可以表示6个bit的信息 （编码表） 🤔1个ASCII编码字符 8 bit，base64 一个码字 6 bit\n如何编码？\n1.2.4 base64 padding padding rule: \u0026#39;0\u0026#39;字符填充 @Utils.print_params def encode_b64_with_ascii_bin(text: str): binary_text = \u0026#39; \u0026#39;.join(format(ord(char), \u0026#39;08b\u0026#39;) for char in text) encoded_text = base64.b64encode(text.encode(\u0026#39;ascii\u0026#39;)) return binary_text, encoded_text \u0026gt;\u0026gt;\u0026gt; encode_b64_with_ascii_bin(\u0026#39;1\u0026#39;) Result: (\u0026#39;00110001\u0026#39;, b\u0026#39;MQ==\u0026#39;) \u0026gt;\u0026gt;\u0026gt; encode_b64_with_ascii_bin(\u0026#39;12\u0026#39;) Result: (\u0026#39;00110001 00110010\u0026#39;, b\u0026#39;MTI=\u0026#39;) \u0026gt;\u0026gt;\u0026gt; encode_b64_with_ascii_bin(\u0026#39;123\u0026#39;) Result: (\u0026#39;00110001 00110010 00110011\u0026#39;, b\u0026#39;MTIz\u0026#39;) 1.2.4 base64 padding (Cont’d) 00110001 001100 01 001100 010000 MQ== 00110001 00110010 001100 010011 0010 001100 010011 001000 MTI= 发现等号可以考虑base64解码 1.3 哈希函数 典： 哈希不是加密 虽然网上很多在线哈希都是加密（例子） 1.4 彩虹表 L2. 近世代数和数论 中科院少年班招生要求：手撕大素数分解\n2.1 数论 整除 素数和互素 算数基本定理 $N = p_1^{a_1}p_2^{a_2}\\cdots p_k^{a_k}$ 最大公约数（Greatest Common Divisor, GCD） Euclidean 算法 扩展 Euclidean 算法 $ax + by = \\mathrm{gcd}(x, y)$ $ax + by = 1 \\Rightarrow ax = -by + 1$ $\\Rightarrow ax \\equiv 1 (\\bmod y)$ （$\\mathbb{F}_p$上自然成立） 2.2 模运算算数性质 let $[\\cdot]$ denotes $(\\cdot) \\bmod n$ $[[a]] = [a]$ $[a] + [b] = [a+b]$ $[a] - [b] = [a-b]$ $[a \\times b] = [[a] \\times [b]]$ $[a^k] = [[a]^k]$ 2.3 更多知识 Fermat 小定理 Euler 函数 中国剩余定理 连分数 …… L3. 非对称密码学 textbook RSA，但不会\n3.1 非对称密码学基础 安全的单向陷门函数\n利用Hash的构造……\n↑ 在CTF中不是很重要\n关注点：\n选取素数的算数特性 不合理的加密指数、解密指数选取 不合理的加密方案修改 3.2 textbook RSA from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes from gmpy2 import invert p = getPrime(128) q = getPrime(128) n = p * q phi_n = (p - 1) * (q - 1) e = 65537 d = invert(e, phi_n) m = bytes_to_long(b\u0026#39;Hello, world!\u0026#39;) c = pow(m, e, n) print(long_to_bytes(c)) m_ = pow(c, d, n) print(long_to_bytes(m_)) 3.2 textbook RSA (Cont’d) n = p * q phi_n = (p - 1) * (q - 1) Euler 函数：小于等于$n$的与$n$互素的正整数的个数 $\\varphi(n) = \\varphi(pq) = \\varphi(p) \\varphi(q) = (p-1)(q-1)$ c = pow(m, e, n) m_ = pow(c, d, n) $(m^e \\bmod n)^d \\bmod n = m^{ed} \\bmod n$ $ed = 1 \\bmod \\varphi(n)\\Rightarrow ed = 1 + k\\varphi(n)$ $m^{ed} \\bmod n = m^{1+k\\varphi(n)} \\bmod n$ 3.2 textbook RSA (Cont’d) $m^{ed} \\bmod n = m^{1+k\\varphi(n)} \\bmod n$ $= (m \\bmod n)(m^{k\\varphi(n)} \\bmod n) $ $= (m \\bmod n)(m^{\\varphi(n)} \\bmod n)^k \\bmod n $ Euler 定理：若$m$ 和$n$ 互素，则$m^{\\varphi(n)}\\equiv 1 (\\bmod n)$\n$n = pq, m \u0026lt; p, m \u0026lt; q$\n$m^{ed} \\bmod n = (m \\bmod n) (1)^k \\bmod n$\n$= m \\bmod n$\n3.3 N 分解攻击 一种显然的攻击方法\n小p, q 因式分解 p, q 差值太小或太大 Fermat, Pollard Rho 方法分解 工具：\nyafu Integer factorization calculator 3.3.1 Example 1 - Factor from Crypto.Util.number import getPrime, bytes_to_long from secret import flag p = getPrime(128); q = getPrime(128) n = p * q; phi_n = (p - 1) * (q - 1) e = 65537 m = bytes_to_long(flag) c = pow(m, e, n) print(e); print(n); print(c) # 65537 # 60312637199635801058227385421553206347253918440828187249920737695124886809487 # 14673748133379805475254231366717984351237192567008318062632171353909225806981 3.3.2 Example 1 try 浅浅分解一下 3分钟出结果 3.3.3 Example 1 poc from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes from gmpy2 import invert e = 65537 n = 60312637199635801058227385421553206347253918440828187249920737695124886809487 c = 14673748133379805475254231366717984351237192567008318062632171353909225806981 p = 197_171715_027747_339553_722339_715394_949697 q = 305_888890_762796_266901_267235_667077_573071 phi_n = (p - 1) * (q - 1) d = invert(e, phi_n) m = pow(c, d, n) print(long_to_bytes(m)) # b\u0026#39;flag{waaaaa!}\u0026#39; 3.4 小加密指数攻击 加密指数极小时，发生相关攻击（如$e=3$） 此时： $c \\equiv m^3(\\bmod n)$ $m^3 = c + kn$ $m = (c+kn)^{1/3}$ 攻击方法：Brute-force $k$\n3.4.1 Example 2 - Low-Enc-Exp from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes from gmpy2 import invert from secret import flag p = getPrime(1024); q = getPrime(1024) n = p * q phi_n = (p - 1) * (q - 1) e = 3 m = bytes_to_long(flag) c = pow(m, e, n) print(n) # …","date":16848e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":16848e5,"objectID":"544520cd02c6292549826ebff519a18e","permalink":"https://example.com/slides/2023-summer-crypto/","publishdate":"2023-05-23T00:00:00Z","relpermalink":"/slides/2023-summer-crypto/","section":"slides","summary":"A Brief Introduction to Cryptography in CTF Games","tags":[],"title":"A Brief Introduction to Cryptography in CTF Games","type":"slides"},{"authors":["Luminol Chen"],"categories":[],"content":"什么是密码学？ 密码学是数学和计算机科学的交叉学科。在国内一般作为 信息安全专业的必修课程。密码学的开端是Shannon在1945年发表的《Communication Theory of Secrecy Systems》而在这之前，密码更像是一种技艺（Art）而非一种科学技术（Technique）。\nYou can check the Wiki Page for more information.\n按照Shannon理论，密码学可分为两个阶段：\n古典密码学：基于巧妙构造形成的Art 现代密码学：基于数学原理形成的Technique 古典密码学 一种比较有趣的，并且能在影视剧中看到的古典密码叫做滚筒密码。滚筒密码的加密原理就是双方规定好木棍的直径，写信人把腰带绑在木棍上书写，在收信人收到信之后，只需要把腰带绑到相同规格的木棍上就能还原信的内容。\n如果用现代密码学的语言去描述，信件的内容即为明文，通过滚筒写出来的纸片就是明文，而密钥就是那根木棍。\n而实质上我们可以发现，我们是在对一个字符串间隔取字符： 例如对串：Hello-Crypto!，我们把他写在正四棱柱形成的纸带上，就可以获得：Hoy!e-plCtlro，而这和隔4个字符1取的操作是一样的，我们可以给出一个形式化的代码实现：\n\u0026gt;\u0026gt;\u0026gt; def encrypt(msg: string, key: int) -\u0026gt; string: ... splitted_str = [\u0026#39;\u0026#39; for _ in range(key)] ... iter = 0 ... for ch in msg: ... splitted_str[iter].append(ch) ... iter += 1 ... cipher = \u0026#39;\u0026#39; ... cipher.join(splitted_str) \u0026gt;\u0026gt;\u0026gt; encrypt(\u0026#39;Hello-Crypto!\u0026#39;, 4) \u0026#39;Hoy!e-plCtlro\u0026#39; 而事实上，这就是一个栅栏密码，你可以在这个网站上尝试。\n解密过程偷懒不写啦，聪明如你一定能自己figure out!\n而这就是古典密码学从最原始的的阶段，步入了近现代的阶段。从一些工具的使用，变成了算数。在此基础上形成了大量的替换密码（如Caesar密码、Vigenère密码）。\n事实上computer最早的含义是计算员，大多都是一些熟练算术技巧的人来破译密码的，而我们熟知的Alan Turing事实上在二战时也是负责这个工作。\n现代密码学 现代密码学的开端是Shannon的那篇文章，其中提出了一个重要的概念，完美安全性（Perfect Security）。完美安全性的形式化定义用到了概率论的知识，因此此处不展开。我们仅对其产生的原因进行一些阐述。\n古典密码在当时基本全都被破解了，密码欠缺一个正式的、准确的定义去衡量证明一个密码方案是否具有严格的安全性，因此Shannon理论应运而生。\n一个密码体系保证完美安全性，当其加密后的密文不会透露任何关于明文的信息。而在这种定义下，即使攻击者拥有无穷的算力，也不能被破解。\n😮注意，是无穷的算力！\n但是根据Shannon的推论，一个保证完美安全性的密码体系，其密钥空间一定大于明文空间。也就是说，我的密钥不会比明文更短。而我们可以思考，如果有一个信道，可以安全的用于传输密钥，为什么不直接拿来传输明文呢？因此目前的密码体系都不保证完美安全性。\n而在这基础上，就催生了流密码和分块密码，他们被统称为对称密码学。总的来说，对称密码学致力于让短密钥经过一些神奇的操作，也可以发挥和长密钥相同的作用：\n流密码：通过随机数生成器序列，生成长密钥 分块密码：通过对明文分块，逐一用短密钥加密 此处是非常不严谨的表达，仅作为理解\n而与之对应的，是非对称密码学（又称为公钥密码学），该类密码体系的特点是拥有公钥和私钥两个密钥，他们往往基于数学上的难题进行规约：\nRSA：大数质因数分解难题 ElGamal：模乘群上的离散对数问题 ECC-ElGamal：椭圆曲线加法群上的离散对数问题 一个简单的例子是，给定两个大质数 $p, q$ ，给你他们的乘积 $N = pq$ ，你是很难分别求解出 $p$ 和 $q$ 的。\n😈试试吧！N = 115157048927615167000080222307830600550443405087336034834570254657109854848846966155326673813367130632850579378687042597345617010423842872052308839845927421052730005967200985762648016655477422221735535543563770813175765249421783025141172284969133662823566566070113584080582203941254237438639149018559749238997\n而这种数学上的难解特性就可以被利用，构造密码体系。\n具体需要一些数论和抽象代数的知识，这里就不展开啦~\n小结 事实上，上面两个问题都只解决了数据隐秘性的保护，不一定能够保证数据仍是完整的、未被篡改过的。而这就需要更多的知识，包括：\n消息认证码 数字签名 而目前随着量子计算机的出现，Shor算法已经从理论上证明了能够在多项式时间内攻破目前常见的密码体系，于是又有了一些后量子密码学的研究：\n格密码学 编码密码学 当然还有一些和其他方向的交叉，如：\n区块链（散列和共识机制） 安全多方计算（联邦学习） 零知识证明 学习路线 笔者的学习路线是：密码基础-数学基础-现代密码学，比较诡异，下面整理一下比较正常的路线：\n数学基础：离散数学、数论、近世代数、概率论 古典密码学：了解代换密码 对称密码学：流密码、对称密码、PRG、PRF 非对称密码学：Diffie-Hellman密钥交换、陷门函数、RSA、ElGamal、同态加密 应用密码学：哈希函数、消息认证码、数字签名 推荐一些书目：\nIntroduction to Modern Cryptography, Jonathan Katz and Yehuda Lindell 初等数论, 潘承洞、潘承彪 抽象代数学, 姚慕生 ","date":1655808773,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655808773,"objectID":"257758fd8ac51219cb4cdd87a946f95f","permalink":"https://example.com/post/cryptography-guide/","publishdate":"2022-06-21T18:52:53+08:00","relpermalink":"/post/cryptography-guide/","section":"post","summary":"LuminolT's learning experience on Cryptography","tags":["Cryptography"],"title":"(CN) An Breif Introduction to Cryptography","type":"post"},{"authors":[],"categories":[],"content":"The following links are from my friends, you can check their personal page.\nChasing, Gopher, Major in Computer Science, SHU\nShaosy, ACMer, Major in Computer Engineering, NTU\n","date":1655397031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655397030,"objectID":"682d90e839cba34350570e9a59c9f241","permalink":"https://example.com/friend/","publishdate":"2022-06-17T00:30:31+08:00","relpermalink":"/friend/","section":"","summary":"The following links are from my friends, you can check their personal page.\nChasing, Gopher, Major in Computer Science, SHU\nShaosy, ACMer, Major in Computer Engineering, NTU","tags":[],"title":"Friend Link","type":"page"},{"authors":[],"categories":[],"content":"SHU 导航 | SHU Re-direction 官网 邮箱\t书籍查询\t网络课程\tPIM\t一网通办\t选课助手\t在线选课\n图书馆云打印\tACM-OJ\t洛谷\t视听说英语平台\t网安培养方案\n教务部\n密码学工具 | Cryptography Tools SageMath: Mathematical Software pycryptodome: Cryptography Library for Python ","date":1655396647,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655396647,"objectID":"03fe44d279d38c966381cde2f5f59736","permalink":"https://example.com/tool/","publishdate":"2022-06-17T00:24:07+08:00","relpermalink":"/tool/","section":"","summary":"SHU 导航 | SHU Re-direction 官网 邮箱\t书籍查询\t网络课程\tPIM\t一网通办\t选课助手\t在线选课\n图书馆云打印\tACM-OJ\t洛谷\t视听说英语平台\t网安培养方案\n教务部\n密码学工具 | Cryptography Tools SageMath: Mathematical Software pycryptodome: Cryptography Library for Python ","tags":[],"title":"Tool","type":"page"},{"authors":["Luminol Chen","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]