[{"authors":null,"categories":null,"content":"Chenghao CHEN is a M.E student in Electronic Information (Cyberspace Security) at Shanghai Jiao Tong University (SJTU). His research interests include modern cryptography and secure computer architecture. He is actively engaged in applied cryptography and trusted execution environment research at the Lab of Cryptology and Computer Security (LoCCS) of SJTU, under the guidance of Prof. Dawu Gu.\nSkills 🗣️ Language: Chinese (native), English (fluent) 💻 Coding: Python (proficient); C/C++, Go, Verilog, SystemVerilog (competent) ⚙️ Others: RISC-V, Linux, Git, Docker … ","date":1713916800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1713916800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"2024-04-24T00:00:00Z","relpermalink":"","section":"authors","summary":"Chenghao CHEN is a M.E student in Electronic Information (Cyberspace Security) at Shanghai Jiao Tong University (SJTU). His research interests include modern cryptography and secure computer architecture. He is actively engaged in applied cryptography and trusted execution environment research at the Lab of Cryptology and Computer Security (LoCCS) of SJTU, under the guidance of Prof.","tags":null,"title":"Chenghao Chen","type":"authors"},{"authors":null,"categories":null,"content":"本项目为面向上海大学网络空间安全专业 2022 级本科生的暑期实训课程.\n主要内容包括：\n密码学介绍 近世代数和数论基础 textbook RSA 相关攻击方法 Challenges 本期课程相较于往年课程内容差异不大, 重点增加了学习方法和现代密码学技术概要, 旨在让同学们基本了解密码学相关的技术现状, 以及 CTF 中密码学基础的知识.\n网络空间安全是一个非常注重实践的学科, 请一定独立完成课后的实验部分. 请在课程结束后仔细阅读《提问的智慧》和《别像弱智一样提问》这两篇文章, 理解 STFW, RTFM, RTFSC 的内涵.\n👉 为什么要强调提问？ 对于经常寻求帮助的同学.\n你是否考虑过, 当你进入公司或学校课题组时, 可能会遇到需要独自解决技术问题的情况? 你的同事或师兄师姐也有自己的任务, 不一定有时间帮助你. 若缺乏独立解决问题的能力, 你可能会陷入困境.\n好消息是, 这种能力是可以培养的. 那些被称为\u0026#34;大佬\u0026#34;的人, 比你更早开始锻炼这项能力. 他们在你提问时, 已经解决了无数问题. 你的能力与独立解决问题的努力成正比, 大佬的答案展示的是他们的能力, 而不是你的. 所以, 端正心态, 尽最大努力独立解决遇到的问题, 这对你非常重要.\n对于经常帮助他人的同学.\n你或许在帮助同学时获得成就感, 但这也可能剥夺了他们受训练的机会. 网络空间安全任何方向的精进学习都需要长期的专业训练. 因此, 在帮助同学时, 尽量引导他们自己查资料、看手册、看代码, 并提出自己的思考和解决方案. 这不仅有助于他们的专业成长, 也能让你们共同进步. 学习本身需要付出, 如果问题的答案太容易获得, 他们就无法从中得到应有的训练.\nTools 实验过程中需要你进行信息检索, 推荐使用 Bing 进行. 同时, 你会使用到 Python 的 Crypto 库和 gmpy2 库, 请完成安装.\nChallenges Chal1. 套娃 本题共 3 个 flag flag 形式均为：\u0026#39;flag{[0-9A-Za-z=_]*}\u0026#39; 新佛曰：諸隸僧降冥吽諸陀摩隸僧缽冥薩願耨咤陀願羅咤喃迦祗蜜耨阿嚤僧喼所聞薩闍嚩聞念須亦心耨冥心阿冥聞慧蜜咤冥心念訶冥嚩冥聞冥念降咤冥劫耨降寂願慧般祗闍隸冥修阿闍莊陀冥莊冥劫莊嚴冥宣隸阿摩嚩蜜心咒冥闍我須咒慧冥闍諦羅迦聞慧婆劫嘚慧咒迦慧慧我慧冥闍念劫嘇隸蜜祗伏嚤慧咒修缽聞色祗冥闍僧嘚迦降阿莊冥慧聞蜜降咤寂波嘇塞薩如囑\nChal2. ezRSA 本题共 1 个 flag flag 形式为：\u0026#39;flag{[0-9A-Za-z=_]*}\u0026#39; from Crypto.Util.number import getPrime, bytes_to_long from gmpy2 import is_prime, invert from typing import Tuple from secert import flag def gen_rsa_param() -\u0026gt; Tuple[int, int, int, int, int]: \u0026#34;\u0026#34;\u0026#34;Generate usable RSA parameters. params: None return: a tuple, including `p, q, n, e, d` \u0026#34;\u0026#34;\u0026#34; p = getPrime(256) q = p + 2 while True: q += 2 if is_prime(q): break assert p \u0026lt; q n = p * q phi_n = (p-1) * (q-1) e = 0x10001 d = invert(e, phi_n) return p, q, n, e, d def rsa_encrypt(m: str, *args) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Generate usable RSA parameters. params: m: message to be encrypted args: RSA parameters return: a string, which is the encrypted message \u0026#34;\u0026#34;\u0026#34; assert len(args) == 5 p, q, n, e, d = args m = bytes_to_long(m) c = pow(m, e, n) return c params = gen_rsa_param() print(rsa_encrypt(flag, *params)) print(params[2]) # 5796768148637887491255587039409951397511832995737366433505141785703232675749200657380232851343254281355390391562734825283953711907092653161783752372166386 # 7948512242985881433771203281939490726039994357587772712416312873824297606161653053722572268861029945737411249803561023517431875922105282741637330609169129 ","date":17172e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":17172e5,"objectID":"9fa63d95e3a29aa2fb24f869a3640840","permalink":"https://luminolt.cn/talk/2024-cryptography-summer-camp/","publishdate":"2024-06-01T00:00:00Z","relpermalink":"/talk/2024-cryptography-summer-camp/","section":"event","summary":"A series of Cryptography courses to SHU's students","tags":["Cryptography"],"title":"2024 Cryptography Summer Camp","type":"event"},{"authors":["Xiaolin Zhang","Chenghao Chen","Kailun Qin","Yuxuan Wang","Shipei Qu","Tengfei Wang","Chi Zhang","Dawu Gu"],"categories":null,"content":"Abstract The signing key protection for certificate authorities (CAs) is crucial in PKI. However, these keys can be exposed even in today’s infrastructure. Traditional protections fail to eliminate this risk since attackers can always capture digital leakage of the keys through various carefully designed attacks or accidental human errors. This dilemma motivates us to consider removing CA’s signing keys and propose Armored Core, a PKI security enhancement using the trusted binding of physically unclonable function (PUF) for CA.\nIn Armored Core, CAs issue PUF-based X.509v3 TLS certificates, where they use PUF to generate physically trusted “signatures” for domain public keys. The PUF transparency mechanism, deployed with certificate transparency (CT), ensures the monitoring for PUF calling behaviors of CA. We formally prove the existential unforgeability of PUF endorsements in the certificates. Armored Core is integrated into real-world PKI codebases like Let’s Encrypt Pebble and Certbot. The results show that it can remove the signing key for CA without bringing any extra overhead to the original systems, but instead improves computing efficiency by \u0026gt;4.9% and saves \u0026gt;11% of storage. It can be the first effective solution that makes key exposure impossible for CA in PKI.\n","date":1713916800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1713916800,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://luminolt.cn/publication/preprint/","publishdate":"2024-04-24T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"Armored Core of PKI: Remove Signing Keys for CA via Physically Unclonable Function","type":"publication"},{"authors":null,"categories":null,"content":"本项目为面向上海大学网络空间安全专业本科生（2020级、2021级）的暑期实训课程。 内容包括：\n密码和编码 近世代数和数论 非对称密码 Challenges Repository 本课程相关材料均已在 GitHub-LuminolT/security-summercamp 备份。\nChallenges Chal1. 套娃 本题共 3 个 flag flag 形式均为：\u0026#39;flag{[0-9A-Za-z=_]*}\u0026#39; 新佛曰：諸隸僧降冥吽諸陀摩隸僧缽冥薩願耨咤陀願羅咤喃迦祗蜜耨阿嚤僧喼所聞薩闍嚩聞念須亦心耨冥心阿冥聞慧蜜咤冥心念訶冥嚩冥聞冥念降咤冥劫耨降寂願慧般祗闍隸冥修阿闍莊陀冥莊冥劫莊嚴冥宣隸阿摩嚩蜜心咒冥闍我須咒慧冥闍諦羅迦聞慧婆劫嘚慧咒迦慧慧我慧冥闍念劫嘇隸蜜祗伏嚤慧咒修缽聞色祗冥闍僧嘚迦降阿莊冥慧聞蜜降咤寂波嘇塞薩如囑\nChal2. ezRSA 本题共 1 个 flag flag 形式为：\u0026#39;flag{[0-9A-Za-z=_]*}\u0026#39; from Crypto.Util.number import getPrime, bytes_to_long from gmpy2 import is_prime, invert from typing import Tuple from secert import flag def gen_rsa_param() -\u0026gt; Tuple[int, int, int, int, int]: \u0026#34;\u0026#34;\u0026#34;Generate usable RSA parameters. params: None return: a tuple, including `p, q, n, e, d` \u0026#34;\u0026#34;\u0026#34; p = getPrime(256) q = p + 2 while True: q += 2 if is_prime(q): break assert p \u0026lt; q n = p * q phi_n = (p-1) * (q-1) e = 0x10001 d = invert(e, phi_n) return p, q, n, e, d def rsa_encrypt(m: str, *args) -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;Generate usable RSA parameters. params: m: message to be encrypted args: RSA parameters return: a string, which is the encrypted message \u0026#34;\u0026#34;\u0026#34; assert len(args) == 5 p, q, n, e, d = args m = bytes_to_long(m) c = pow(m, e, n) return c params = gen_rsa_param() print(rsa_encrypt(flag, *params)) print(params[2]) # 5796768148637887491255587039409951397511832995737366433505141785703232675749200657380232851343254281355390391562734825283953711907092653161783752372166386 # 7948512242985881433771203281939490726039994357587772712416312873824297606161653053722572268861029945737411249803561023517431875922105282741637330609169129 ","date":16848e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":16848e5,"objectID":"913d7964d41dccfcb40501fd6179e88a","permalink":"https://luminolt.cn/talk/2023-cryptography-summer-camp/","publishdate":"2023-05-23T00:00:00Z","relpermalink":"/talk/2023-cryptography-summer-camp/","section":"event","summary":"A series of Cryptography courses to SHU's students","tags":["Cryptography"],"title":"2023 Cryptography Summer Camp","type":"event"},{"authors":["Chenghao Chen"],"categories":[],"content":"什么是密码学？ 密码学是数学和计算机科学的交叉学科。在国内一般作为 信息安全专业的必修课程。密码学的开端是Shannon在1945年发表的《Communication Theory of Secrecy Systems》而在这之前，密码更像是一种技艺（Art）而非一种科学技术（Technique）。\nYou can check the Wiki Page for more information.\n按照Shannon理论，密码学可分为两个阶段：\n古典密码学：基于巧妙构造形成的Art 现代密码学：基于数学原理形成的Technique 古典密码学 一种比较有趣的，并且能在影视剧中看到的古典密码叫做滚筒密码。滚筒密码的加密原理就是双方规定好木棍的直径，写信人把腰带绑在木棍上书写，在收信人收到信之后，只需要把腰带绑到相同规格的木棍上就能还原信的内容。\n如果用现代密码学的语言去描述，信件的内容即为明文，通过滚筒写出来的纸片就是明文，而密钥就是那根木棍。\n而实质上我们可以发现，我们是在对一个字符串间隔取字符： 例如对串：Hello-Crypto!，我们把他写在正四棱柱形成的纸带上，就可以获得：Hoy!e-plCtlro，而这和隔4个字符1取的操作是一样的，我们可以给出一个形式化的代码实现：\n\u0026gt;\u0026gt;\u0026gt; def encrypt(msg: string, key: int) -\u0026gt; string: ... splitted_str = [\u0026#39;\u0026#39; for _ in range(key)] ... iter = 0 ... for ch in msg: ... splitted_str[iter].append(ch) ... iter += 1 ... cipher = \u0026#39;\u0026#39; ... cipher.join(splitted_str) \u0026gt;\u0026gt;\u0026gt; encrypt(\u0026#39;Hello-Crypto!\u0026#39;, 4) \u0026#39;Hoy!e-plCtlro\u0026#39; 而事实上，这就是一个栅栏密码，你可以在这个网站上尝试。\n解密过程偷懒不写啦，聪明如你一定能自己figure out!\n而这就是古典密码学从最原始的的阶段，步入了近现代的阶段。从一些工具的使用，变成了算数。在此基础上形成了大量的替换密码（如Caesar密码、Vigenère密码）。\n事实上computer最早的含义是计算员，大多都是一些熟练算术技巧的人来破译密码的，而我们熟知的Alan Turing事实上在二战时也是负责这个工作。\n现代密码学 现代密码学的开端是Shannon的那篇文章，其中提出了一个重要的概念，完美安全性（Perfect Security）。完美安全性的形式化定义用到了概率论的知识，因此此处不展开。我们仅对其产生的原因进行一些阐述。\n古典密码在当时基本全都被破解了，密码欠缺一个正式的、准确的定义去衡量证明一个密码方案是否具有严格的安全性，因此Shannon理论应运而生。\n一个密码体系保证完美安全性，当其加密后的密文不会透露任何关于明文的信息。而在这种定义下，即使攻击者拥有无穷的算力，也不能被破解。\n😮注意，是无穷的算力！\n但是根据Shannon的推论，一个保证完美安全性的密码体系，其密钥空间一定大于明文空间。也就是说，我的密钥不会比明文更短。而我们可以思考，如果有一个信道，可以安全的用于传输密钥，为什么不直接拿来传输明文呢？因此目前的密码体系都不保证完美安全性。\n而在这基础上，就催生了流密码和分块密码，他们被统称为对称密码学。总的来说，对称密码学致力于让短密钥经过一些神奇的操作，也可以发挥和长密钥相同的作用：\n流密码：通过随机数生成器序列，生成长密钥 分块密码：通过对明文分块，逐一用短密钥加密 此处是非常不严谨的表达，仅作为理解\n而与之对应的，是非对称密码学（又称为公钥密码学），该类密码体系的特点是拥有公钥和私钥两个密钥，他们往往基于数学上的难题进行规约：\nRSA：大数质因数分解难题 ElGamal：模乘群上的离散对数问题 ECC-ElGamal：椭圆曲线加法群上的离散对数问题 一个简单的例子是，给定两个大质数 $p, q$ ，给你他们的乘积 $N = pq$ ，你是很难分别求解出 $p$ 和 $q$ 的。\n😈试试吧！N = 115157048927615167000080222307830600550443405087336034834570254657109854848846966155326673813367130632850579378687042597345617010423842872052308839845927421052730005967200985762648016655477422221735535543563770813175765249421783025141172284969133662823566566070113584080582203941254237438639149018559749238997\n而这种数学上的难解特性就可以被利用，构造密码体系。\n具体需要一些数论和抽象代数的知识，这里就不展开啦~\n小结 事实上，上面两个问题都只解决了数据隐秘性的保护，不一定能够保证数据仍是完整的、未被篡改过的。而这就需要更多的知识，包括：\n消息认证码 数字签名 而目前随着量子计算机的出现，Shor算法已经从理论上证明了能够在多项式时间内攻破目前常见的密码体系，于是又有了一些后量子密码学的研究：\n格密码学 编码密码学 当然还有一些和其他方向的交叉，如：\n区块链（散列和共识机制） 安全多方计算（联邦学习） 零知识证明 学习路线 笔者的学习路线是：密码基础-数学基础-现代密码学，比较诡异，下面整理一下比较正常的路线：\n数学基础：离散数学、数论、近世代数、概率论 古典密码学：了解代换密码 对称密码学：流密码、对称密码、PRG、PRF 非对称密码学：Diffie-Hellman密钥交换、陷门函数、RSA、ElGamal、同态加密 应用密码学：哈希函数、消息认证码、数字签名 推荐一些书目：\nIntroduction to Modern Cryptography, Jonathan Katz and Yehuda Lindell 初等数论, 潘承洞、潘承彪 抽象代数学, 姚慕生 ","date":1655808773,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655808773,"objectID":"354c691dd8b50a3945bf7af603147465","permalink":"https://luminolt.cn/post/2206-intro-to-cryptography/","publishdate":"2022-06-21T18:52:53+08:00","relpermalink":"/post/2206-intro-to-cryptography/","section":"post","summary":"Introducing Cryptography to the 2021 freshmen","tags":["Cryptography"],"title":"(CN) An Breif Introduction to Cryptography","type":"post"},{"authors":[],"categories":[],"content":"The following links are from my friends, you can check their personal page.\nChasing, Gopher, Major in Computer Science, SHU\nShaosy, ACMer, Major in Computer Engineering, NTU\n","date":1655397031,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655397030,"objectID":"a7487aed908c38304252d1bbf8a74f90","permalink":"https://luminolt.cn/friends/","publishdate":"2022-06-17T00:30:31+08:00","relpermalink":"/friends/","section":"","summary":"The following links are from my friends, you can check their personal page.\nChasing, Gopher, Major in Computer Science, SHU\nShaosy, ACMer, Major in Computer Engineering, NTU","tags":[],"title":"Friend Link","type":"page"},{"authors":[],"categories":[],"content":"SHU 导航 | SHU Re-direction 官网 邮箱\t书籍查询\t网络课程\tPIM\t一网通办\t选课助手\t在线选课\n图书馆云打印\tACM-OJ\t洛谷\t视听说英语平台\t网安培养方案\n教务部\n密码学工具 | Cryptography Tools SageMath: Mathematical Software pycryptodome: Cryptography Library for Python ","date":1655396647,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655396647,"objectID":"b51dc600979d5dc62730cc9d9715551a","permalink":"https://luminolt.cn/tools/","publishdate":"2022-06-17T00:24:07+08:00","relpermalink":"/tools/","section":"","summary":"SHU 导航 | SHU Re-direction 官网 邮箱\t书籍查询\t网络课程\tPIM\t一网通办\t选课助手\t在线选课\n图书馆云打印\tACM-OJ\t洛谷\t视听说英语平台\t网安培养方案\n教务部\n密码学工具 | Cryptography Tools SageMath: Mathematical Software pycryptodome: Cryptography Library for Python ","tags":[],"title":"Tool","type":"page"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://luminolt.cn/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://luminolt.cn/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"}]