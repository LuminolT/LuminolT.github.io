<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Luminolt</title><link>https://example.com/</link><atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml"/><description>Luminolt</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Tue, 23 May 2023 00:00:00 +0000</lastBuildDate><image><url>https://example.com/media/icon_hu1b90dea3b5752ec4ed6154c0dc881a21_30314_512x512_fill_lanczos_center_3.png</url><title>Luminolt</title><link>https://example.com/</link></image><item><title>2023 Crypto Camp</title><link>https://example.com/project/2023-summer-crypto-project/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://example.com/project/2023-summer-crypto-project/</guid><description>&lt;p>本项目为面向上海大学网络空间安全专业本科生（2020级、2021级）的暑期实训课程。
内容包括：&lt;/p>
&lt;ol>
&lt;li>密码和编码&lt;/li>
&lt;li>近世代数和数论&lt;/li>
&lt;li>非对称密码&lt;/li>
&lt;li>Challenges&lt;/li>
&lt;/ol>
&lt;h2 id="repository">Repository&lt;/h2>
&lt;p>本课程相关材料均已在 &lt;a href="https://github.com/LuminolT/security-summercamp" target="_blank" rel="noopener">GitHub-LuminolT/security-summercamp&lt;/a> 备份。&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="chal1-套娃">Chal1. 套娃&lt;/h3>
&lt;ul>
&lt;li>本题共 3 个 flag&lt;/li>
&lt;li>flag 形式均为：&lt;code>'flag{[0-9A-Za-z=_]*}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>新佛曰：諸隸僧降冥吽諸陀摩隸僧缽冥薩願耨咤陀願羅咤喃迦祗蜜耨阿嚤僧喼所聞薩闍嚩聞念須亦心耨冥心阿冥聞慧蜜咤冥心念訶冥嚩冥聞冥念降咤冥劫耨降寂願慧般祗闍隸冥修阿闍莊陀冥莊冥劫莊嚴冥宣隸阿摩嚩蜜心咒冥闍我須咒慧冥闍諦羅迦聞慧婆劫嘚慧咒迦慧慧我慧冥闍念劫嘇隸蜜祗伏嚤慧咒修缽聞色祗冥闍僧嘚迦降阿莊冥慧聞蜜降咤寂波嘇塞薩如囑&lt;/p>
&lt;/blockquote>
&lt;h3 id="chal2-ezrsa">Chal2. ezRSA&lt;/h3>
&lt;ul>
&lt;li>本题共 1 个 flag&lt;/li>
&lt;li>flag 形式为：&lt;code>'flag{[0-9A-Za-z=_]*}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">is_prime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">invert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Tuple&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">secert&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">gen_rsa_param&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Generate usable RSA parameters.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> None
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> return:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> a tuple, including `p, q, n, e, d`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">256&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">q&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">is_prime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x10001&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">phi_n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">rsa_encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;Generate usable RSA parameters.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> params:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> m: message to be encrypted
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> args: RSA parameters
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> return:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> a string, which is the encrypted message
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">assert&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">args&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gen_rsa_param&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rsa_encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 5796768148637887491255587039409951397511832995737366433505141785703232675749200657380232851343254281355390391562734825283953711907092653161783752372166386&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 7948512242985881433771203281939490726039994357587772712416312873824297606161653053722572268861029945737411249803561023517431875922105282741637330609169129&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>A Brief Introduction to Cryptography in CTF Games</title><link>https://example.com/slides/2023-summer-crypto/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://example.com/slides/2023-summer-crypto/</guid><description>&lt;style>
.reveal .slide-number {
display: none;
}
.reveal h2 {
font-size: 48px;
border-bottom: 2px solid rgb(183, 198, 223);
padding-bottom: 20px;
}
.reveal h1,
.reveal h2,
.reveal h3,
.reveal h4,
.reveal h5,
.reveal h6 {
text-align: left;
margin: 0 0 20px 0;
color: #ffffff;
font-weight: 400;
line-height: 1.2;
letter-spacing: normal;
}
&lt;/style>
&lt;div class="middle center">
&lt;div style="width: 100%">
&lt;h1 id="a-brief-introduction-to-cryptography-in-ctf-games">A Brief Introduction to Cryptography in CTF Games&lt;/h1>
&lt;p>Chenghao Chen | 2022.6&lt;/p>
&lt;p>Shanghai University&lt;/p>
&lt;hr>
&lt;h2 id="outline">Outline?!&lt;/h2>
&lt;br>
&lt;ol>
&lt;li>密码和编码&lt;/li>
&lt;li>古典密码学&lt;/li>
&lt;li>对称密码学&lt;/li>
&lt;li>Hash 函数&lt;/li>
&lt;li>近世代数和数论&lt;/li>
&lt;li>非对称密码&lt;/li>
&lt;li>范畴论和同态加密&lt;/li>
&lt;li>格论和格密码&lt;/li>
&lt;/ol>
&lt;p>&lt;img style="position: absolute; right: 30%; top: 50%; transform: translate(50%, -50%);"
width="25%"
src="https://picx.zhimg.com/80/v2-90f3ef45d2fbbd492dd36def9c1e5f53_720w.webp?source=1940ef5c">&lt;/p>
&lt;hr>
&lt;h2 id="outline-1">Outline&lt;/h2>
&lt;p>&lt;br>&lt;br>&lt;/p>
&lt;ol>
&lt;li>密码和编码&lt;/li>
&lt;li>近世代数和数论&lt;/li>
&lt;li>非对称密码-RSA&lt;/li>
&lt;li>Challenges&lt;/li>
&lt;/ol>
&lt;!-- 增加一个图片在右方 -->
&lt;p>&lt;img style="position: absolute; right: 30%; top: 65%; transform: translate(50%, -50%);"
width="25%"
src="https://th.bing.com/th/id/OIP.yuNmwCWteG3UH5sRuIAAPgHaGX?pid=ImgDet&amp;rs=1">&lt;/p>
&lt;hr>
&lt;div class="middle center">
&lt;div style="width: 100%">
&lt;h1 id="l1-密码和编码">L1. 密码和编码&lt;/h1>
&lt;p>实际上是一个引言，并且介绍了 ancient 神必编码&lt;/p>
&lt;hr>
&lt;h2 id="11-一些会被搞混的术语">1.1 一些会被搞混的术语&lt;/h2>
&lt;ul>
&lt;li>密码（Cryptography）：用于保护信息安全的过程
&lt;ul>
&lt;li>&lt;code>Encrypt(k, m)&lt;/code>&lt;/li>
&lt;li>&lt;code>Decrypt(k, c)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>编码（Code Theory）：信息转换为不同形式的过程
&lt;ul>
&lt;li>&lt;code>Encode(m)&lt;/code>&lt;/li>
&lt;li>&lt;code>Decode(e)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>口令（Password）：用户登录的凭证&lt;/li>
&lt;li>散列（Hash）：（抗碰撞的）单向的压缩函数&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="12-常见编码方法">1.2 常见编码方法&lt;/h2>
&lt;p>实用编码方法：&lt;/p>
&lt;ul>
&lt;li>字符编码：ASCII, Unicode&lt;/li>
&lt;li>二进制数据编码：base, Hex&lt;/li>
&lt;li>URL编码：e.g. &lt;code>' '&lt;/code> -&amp;gt; &lt;code>%20&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>玩具编码方法：&lt;/p>
&lt;ul>
&lt;li>与佛论禅：e.g. 佛曰：俱利知曳罰陀那無呐諦梵多不僧室得諳有呐跋姪阿&lt;/li>
&lt;li>兽音译者：e.g. ~呜嗷呜呜呜呜~啊啊啊啊&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="121-字符编码转换错误">1.2.1 字符编码转换错误&lt;/h2>
&lt;p>（一种比较古老的题目）&lt;/p>
&lt;ul>
&lt;li>古早的时候编码标准不统一，会产生乱码&lt;/li>
&lt;li>GBK, BIG5, UTF-8&lt;/li>
&lt;li>e.g.:
&lt;ul>
&lt;li>（打开编码 UTF-8）��ѽѽѽѽѽѽ&lt;/li>
&lt;li>（实际编码GBK）哇呀呀呀呀呀呀&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="122-锟斤拷">1.2.2 锟斤拷&lt;/h2>
&lt;ul>
&lt;li>Replacement Character �&lt;/li>
&lt;/ul>
&lt;p>🤔 锟斤拷&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;�&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\xef\xbf\xbd&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;锟斤拷&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;gbk&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\xef\xbf\xbd\xef\xbf\xbd&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>🤷随着文本替换，信息丢失&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="123-base64">1.2.3 base64&lt;/h2>
&lt;p>base64&lt;/p>
&lt;ul>
&lt;li>二进制-文本间的编码方法&lt;/li>
&lt;li>64个编码字符（&lt;code>'A-Za-z0-9+/'&lt;/code>）&lt;/li>
&lt;li>$64 = 2^6$，因而 base64 编码的码字可以表示6个bit的信息&lt;/li>
&lt;li>（&lt;a href="https://c.runoob.com/front-end/693/" target="_blank" rel="noopener">编码表&lt;/a>）&lt;/li>
&lt;/ul>
&lt;p>🤔1个ASCII编码字符 8 bit，base64 一个码字 6 bit&lt;/p>
&lt;p>如何编码？&lt;/p>
&lt;hr>
&lt;h2 id="124-base64-padding">1.2.4 base64 padding&lt;/h2>
&lt;ul>
&lt;li>padding rule: &lt;code>'0'&lt;/code>字符填充&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Utils.print_params&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">encode_b64_with_ascii_bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">binary_text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">char&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="s1">&amp;#39;08b&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">encoded_text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b64encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ascii&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">binary_text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoded_text&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">encode_b64_with_ascii_bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;00110001&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;MQ==&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">encode_b64_with_ascii_bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;12&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;00110001 00110010&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;MTI=&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">encode_b64_with_ascii_bin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;123&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Result&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;00110001 00110010 00110011&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;MTIz&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="124-base64-padding-contd">1.2.4 base64 padding (Cont&amp;rsquo;d)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">00110001
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">001100 01
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">001100 010000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MQ==
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">00110001 00110010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">001100 010011 0010
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">001100 010011 001000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MTI=
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>发现等号可以考虑base64解码&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="13-哈希函数">1.3 哈希函数&lt;/h2>
&lt;ul>
&lt;li>典：&lt;/li>
&lt;/ul>
&lt;p>&lt;img alt class="center"
src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com//img20230613142148.png"/>&lt;/p>
&lt;ul>
&lt;li>哈希不是加密&lt;/li>
&lt;li>虽然网上很多在线哈希都是加密（&lt;a href="https://www.sojson.com/md5/" target="_blank" rel="noopener">例子&lt;/a>）&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="14-彩虹表">1.4 彩虹表&lt;/h2>
&lt;p>&lt;img alt class="center"
src = "https://upload.wikimedia.org/wikipedia/commons/5/53/Dr._Oechslin_Rainbow_Table_Crypto_2003_Illustration.png"/>&lt;/p>
&lt;hr>
&lt;div class="middle center">
&lt;div style="width: 100%">
&lt;h1 id="l2-近世代数和数论">L2. 近世代数和数论&lt;/h1>
&lt;p>中科院少年班招生要求：手撕大素数分解&lt;/p>
&lt;hr>
&lt;h2 id="21-数论">2.1 数论&lt;/h2>
&lt;ul>
&lt;li>整除&lt;/li>
&lt;li>素数和互素&lt;/li>
&lt;li>算数基本定理
&lt;ul>
&lt;li>$N = p_1^{a_1}p_2^{a_2}\cdots p_k^{a_k}$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最大公约数（Greatest Common Divisor, GCD）
&lt;ul>
&lt;li>Euclidean 算法&lt;/li>
&lt;li>扩展 Euclidean 算法
&lt;ul>
&lt;li>$ax + by = \mathrm{gcd}(x, y)$&lt;/li>
&lt;li>$ax + by = 1 \Rightarrow ax = -by + 1$&lt;/li>
&lt;li>$\Rightarrow ax \equiv 1 (\bmod y)$ （$\mathbb{F}_p$上自然成立）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="22-模运算算数性质">2.2 模运算算数性质&lt;/h2>
&lt;ul>
&lt;li>let $[\cdot]$ denotes $(\cdot) \bmod n$&lt;/li>
&lt;li>$[[a]] = [a]$&lt;/li>
&lt;li>$[a] + [b] = [a+b]$&lt;/li>
&lt;li>$[a] - [b] = [a-b]$&lt;/li>
&lt;li>$[a \times b] = [[a] \times [b]]$&lt;/li>
&lt;li>$[a^k] = [[a]^k]$&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="23-更多知识">2.3 更多知识&lt;/h2>
&lt;ul>
&lt;li>Fermat 小定理&lt;/li>
&lt;li>Euler 函数&lt;/li>
&lt;li>中国剩余定理&lt;/li>
&lt;li>连分数&lt;/li>
&lt;li>……&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="middle center">
&lt;div style="width: 100%">
&lt;h1 id="l3-非对称密码学">L3. 非对称密码学&lt;/h1>
&lt;p>textbook RSA，但不会&lt;/p>
&lt;hr>
&lt;h2 id="31-非对称密码学基础">3.1 非对称密码学基础&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>安全的单向陷门函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>利用Hash的构造……&lt;/p>
&lt;/li>
&lt;li>
&lt;p>↑ 在CTF中不是很重要&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>关注点：&lt;/p>
&lt;ul>
&lt;li>选取素数的算数特性&lt;/li>
&lt;li>不合理的加密指数、解密指数选取&lt;/li>
&lt;li>不合理的加密方案修改&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="32-textbook-rsa">3.2 textbook RSA&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_to_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">invert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">phi_n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">b&lt;/span>&lt;span class="s1">&amp;#39;Hello, world!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">long_to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">long_to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m_&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="32-textbook-rsa-contd">3.2 textbook RSA (Cont&amp;rsquo;d)&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Euler 函数：小于等于$n$的与$n$互素的正整数的个数&lt;/li>
&lt;li>$\varphi(n) = \varphi(pq) = \varphi(p) \varphi(q) = (p-1)(q-1)$&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>$(m^e \bmod n)^d \bmod n = m^{ed} \bmod n$&lt;/li>
&lt;li>$ed = 1 \bmod \varphi(n)\Rightarrow ed = 1 + k\varphi(n)$&lt;/li>
&lt;li>$m^{ed} \bmod n = m^{1+k\varphi(n)} \bmod n$&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="32-textbook-rsa-contd-1">3.2 textbook RSA (Cont&amp;rsquo;d)&lt;/h2>
&lt;ul>
&lt;li>$m^{ed} \bmod n = m^{1+k\varphi(n)} \bmod n$&lt;/li>
&lt;li>$= (m \bmod n)(m^{k\varphi(n)} \bmod n) $&lt;/li>
&lt;li>$= (m \bmod n)(m^{\varphi(n)} \bmod n)^k \bmod n $&lt;/li>
&lt;/ul>
&lt;p>Euler 定理：若$m$ 和$n$ 互素，则$m^{\varphi(n)}\equiv 1 (\bmod n)$&lt;/p>
&lt;ul>
&lt;li>
&lt;p>$n = pq, m &amp;lt; p, m &amp;lt; q$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$m^{ed} \bmod n = (m \bmod n) (1)^k \bmod n$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>$= m \bmod n$&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="33-n-分解攻击">3.3 N 分解攻击&lt;/h2>
&lt;p>一种显然的攻击方法&lt;/p>
&lt;ul>
&lt;li>小p, q
&lt;ul>
&lt;li>因式分解&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>p, q 差值太小或太大
&lt;ul>
&lt;li>Fermat, Pollard Rho 方法分解&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>工具：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://sourceforge.net/projects/yafu/" target="_blank" rel="noopener">yafu&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.alpertron.com.ar/ECM.HTM" target="_blank" rel="noopener">Integer factorization calculator&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="331-example-1---factor">3.3.1 Example 1 - Factor&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">secret&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">128&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 65537&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 60312637199635801058227385421553206347253918440828187249920737695124886809487&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 14673748133379805475254231366717984351237192567008318062632171353909225806981&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="332-example-1-try">3.3.2 Example 1 try&lt;/h2>
&lt;ul>
&lt;li>浅浅分解一下&lt;/li>
&lt;/ul>
&lt;p>&lt;img alt="center" width="70%"
src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com//img20230613164825.png"/>&lt;/p>
&lt;ul>
&lt;li>3分钟出结果&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="333-example-1-poc">3.3.3 Example 1 poc&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_to_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">invert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">60312637199635801058227385421553206347253918440828187249920737695124886809487&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">14673748133379805475254231366717984351237192567008318062632171353909225806981&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">197_171715_027747_339553_722339_715394_949697&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">305_888890_762796_266901_267235_667077_573071&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">invert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">phi_n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">long_to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># b&amp;#39;flag{waaaaa!}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="34-小加密指数攻击">3.4 小加密指数攻击&lt;/h2>
&lt;ul>
&lt;li>加密指数极小时，发生相关攻击（如$e=3$）&lt;/li>
&lt;li>此时：
&lt;ul>
&lt;li>$c \equiv m^3(\bmod n)$&lt;/li>
&lt;li>$m^3 = c + kn$&lt;/li>
&lt;li>$m = (c+kn)^{1/3}$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>攻击方法：Brute-force $k$&lt;/p>
&lt;hr>
&lt;h2 id="341-example-2---low-enc-exp">3.4.1 Example 2 - Low-Enc-Exp&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_to_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">invert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">secret&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 26904410424513850825570476100349039892015194282487533873593315635034916011599061467392303815306522302238291633926964464814719214360401710146660376698471334910919067631926359580676153648632072950953163800307452838629641502897202385008108650370210545081025594811346683868462241559023145711983469942804412184091372375410284776347467254451154229882893062676381167273759770532779269018405250741326382414128740659109901734318180074363144722523208937640098203271310259652100969148051051093951864097917984729026851490884006661280087277384483099665162338506927680335934552565079554069982479529726554065109787187999302935991923&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 31850476042869993856571693940454371912053546150176657900652418191965217904787395659877&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="342-example-2-poc">3.4.2 Example 2 poc&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_to_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">invert&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">iroot&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">26904410424513850825570476100349039892015194282487533873593315635034916011599061467392303815306522302238291633926964464814719214360401710146660376698471334910919067631926359580676153648632072950953163800307452838629641502897202385008108650370210545081025594811346683868462241559023145711983469942804412184091372375410284776347467254451154229882893062676381167273759770532779269018405250741326382414128740659109901734318180074363144722523208937640098203271310259652100969148051051093951864097917984729026851490884006661280087277384483099665162338506927680335934552565079554069982479529726554065109787187999302935991923&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">31850476042869993856571693940454371912053546150176657900652418191965217904787395659877&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iroot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="se">\r&lt;/span>&lt;span class="s1"> i = &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">end&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">long_to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># b&amp;#39;flag{yeahh!}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="35-共模攻击">3.5 共模攻击&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>为什么 $n$ 每次都要重新生成？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>假设重复利用 $n$&lt;/p>
&lt;ul>
&lt;li>$m^{e_1}\equiv c_1(\bmod n)$&lt;/li>
&lt;li>$m^{e_2}\equiv c_2(\bmod n)$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>攻击利用扩展 Euclidean算法（$ae_1+be_2\equiv1 (\bmod n)$）&lt;/p>
&lt;ul>
&lt;li>此时$m^{ae_1+be_2} = c_1^{a}c_2^{b} \bmod n$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="351-example-3---mod-share">3.5.1 Example 3 - Mod Share&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_to_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">invert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">secret&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">q&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">q&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">phi_n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">q&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">e2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 15170797923892054990521305052012509493080568087081023750033741867542316768999951573646413753990834682138025772136109204509899638782616660243658254139599441045875522966283555995043016187825383943336990507193641549144516174056706810327582160942467845635495500282175716057977476074952304306822781341844677001797438535701007875365722512160465708455832225273446521621543823855283418665848061608565467010656663089973001969597624553258295614154262448569387247406903093192587512853122780974388687415079948784446715412138463084264315211437439421528085827503277507203193141860916227982534613135645331857382065795066181077972687&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 9576072468337167131&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 14939113163917820627&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 2513254454937818539320001229715025367247490957880668052989469295768681316833496719591412918630312453676811713071414028525870397074185767769616621123070069290764497635067026772298781749325373581840750494743329569059911576372085939972798876709058137797441729480657418587957036217376669515209286767084322875440709473172117549721159755662718590954657925357615152141194701388245440956597032994743626281679318033304014413523468865879100948882376690862202243813943679264465530741774092309002963261692618613612757084511814696332961571153968794051052454203918248339932068292297123047852899029619284314623645966095118119009347&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 111884194864476659139117439739496481475155670608279036093048194153438641356919888323493937575276768933859172174857427366301659912545016807339447507119749910478246208487569012877733924932126136220607107687643614867740936831894203006503190514539481184016080767542829000468460046831987529804871513461035761669072519101709086162745537847204230913330316446448321633091235409913844098851446548290633634428674269538902219278990312260703412892258533797387149328008600614619162876396153768090553946757954666629947494973412821804101257176286021758524844324847062425088549302146311886502815379004832574784487510491117203079999&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="352-example-3-poc">3.5.2 Example 3 poc&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_to_bytes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">invert&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">gcdext&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">15170797923892054990521305052012509493080568087081023750033741867542316768999951573646413753990834682138025772136109204509899638782616660243658254139599441045875522966283555995043016187825383943336990507193641549144516174056706810327582160942467845635495500282175716057977476074952304306822781341844677001797438535701007875365722512160465708455832225273446521621543823855283418665848061608565467010656663089973001969597624553258295614154262448569387247406903093192587512853122780974388687415079948784446715412138463084264315211437439421528085827503277507203193141860916227982534613135645331857382065795066181077972687&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">9576072468337167131&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">e2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">14939113163917820627&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2513254454937818539320001229715025367247490957880668052989469295768681316833496719591412918630312453676811713071414028525870397074185767769616621123070069290764497635067026772298781749325373581840750494743329569059911576372085939972798876709058137797441729480657418587957036217376669515209286767084322875440709473172117549721159755662718590954657925357615152141194701388245440956597032994743626281679318033304014413523468865879100948882376690862202243813943679264465530741774092309002963261692618613612757084511814696332961571153968794051052454203918248339932068292297123047852899029619284314623645966095118119009347&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">111884194864476659139117439739496481475155670608279036093048194153438641356919888323493937575276768933859172174857427366301659912545016807339447507119749910478246208487569012877733924932126136220607107687643614867740936831894203006503190514539481184016080767542829000468460046831987529804871513461035761669072519101709086162745537847204230913330316446448321633091235409913844098851446548290633634428674269538902219278990312260703412892258533797387149328008600614619162876396153768090553946757954666629947494973412821804101257176286021758524844324847062425088549302146311886502815379004832574784487510491117203079999&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gcd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gcdext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">e2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">n&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">long_to_bytes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># b&amp;#39;flag{zzZzzz}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="middle center">
&lt;div style="width: 100%">
&lt;h1 id="challenge">Challenge&lt;/h1>
&lt;p>上强度&lt;/p>
&lt;hr>
&lt;h2 id="chal1-套娃">Chal1. 套娃&lt;/h2>
&lt;ul>
&lt;li>本题共有3个flag&lt;/li>
&lt;li>所有flag的形式均为&lt;code>'flag{[0-9A-Za-z=_]*}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">新佛曰：諸隸僧降冥吽諸陀摩隸僧缽冥薩願耨咤陀
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">願羅咤喃迦祗蜜耨阿嚤僧喼所聞薩闍嚩聞念須亦心
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">耨冥心阿冥聞慧蜜咤冥心念訶冥嚩冥聞冥念降咤冥
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">劫耨降寂願慧般祗闍隸冥修阿闍莊陀冥莊冥劫莊嚴
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">冥宣隸阿摩嚩蜜心咒冥闍我須咒慧冥闍諦羅迦聞慧
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">婆劫嘚慧咒迦慧慧我慧冥闍念劫嘇隸蜜祗伏嚤慧咒
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">修缽聞色祗冥闍僧嘚迦降阿莊冥慧聞蜜降咤寂波嘇
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">塞薩如囑
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="chal2-ezrsa">Chal2. ezRSA&lt;/h2>
&lt;ul>
&lt;li>本题仅1个flag&lt;/li>
&lt;li>flag的形式均为&lt;code>'flag{[0-9A-Za-z=_]*}'&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">Crypto.Util.number&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">getPrime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bytes_to_long&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">gmpy2&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">is_prime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">invert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">typing&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Tuple&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">secert&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">flag&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">gen_rsa_param&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Tuple&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">rsa_encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gen_rsa_param&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rsa_encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 5796768148637887491255587039409951397511832995737366433505141785703232675749200657380232851343254281355390391562734825283953711907092653161783752372166386&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 7948512242985881433771203281939490726039994357587772712416312873824297606161653053722572268861029945737411249803561023517431875922105282741637330609169129&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>(CN) An Breif Introduction to Cryptography</title><link>https://example.com/post/cryptography-guide/</link><pubDate>Tue, 21 Jun 2022 18:52:53 +0800</pubDate><guid>https://example.com/post/cryptography-guide/</guid><description>&lt;h2 id="什么是密码学">什么是密码学？&lt;/h2>
&lt;p>密码学是数学和计算机科学的交叉学科。在国内一般作为
信息安全专业的必修课程。密码学的开端是Shannon在1945年发表的《Communication Theory of Secrecy Systems》而在这之前，密码更像是一种技艺（Art）而非一种科学技术（Technique）。&lt;/p>
&lt;blockquote>
&lt;p>You can check the &lt;a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener">Wiki Page&lt;/a> for more information.&lt;/p>
&lt;/blockquote>
&lt;p>按照Shannon理论，密码学可分为两个阶段：&lt;/p>
&lt;ul>
&lt;li>古典密码学：基于巧妙构造形成的Art&lt;/li>
&lt;li>现代密码学：基于数学原理形成的Technique&lt;/li>
&lt;/ul>
&lt;h2 id="古典密码学">古典密码学&lt;/h2>
&lt;p>一种比较有趣的，并且能在影视剧中看到的古典密码叫做滚筒密码。滚筒密码的加密原理就是双方规定好木棍的直径，写信人把腰带绑在木棍上书写，在收信人收到信之后，只需要把腰带绑到相同规格的木棍上就能还原信的内容。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://nic.sdufe.edu.cn/__local/3/B1/28/67F57C5431D87E41BCC727F9364_90183162_2CDE.jpg" alt="滚筒密码" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>如果用现代密码学的语言去描述，信件的内容即为明文，通过滚筒写出来的纸片就是明文，而密钥就是那根木棍。&lt;/p>
&lt;p>而实质上我们可以发现，我们是在对一个字符串间隔取字符：
例如对串：&lt;code>Hello-Crypto!&lt;/code>，我们把他写在正四棱柱形成的纸带上，就可以获得：&lt;code>Hoy!e-plCtlro&lt;/code>，而这和隔4个字符1取的操作是一样的，我们可以给出一个形式化的代码实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="nf">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">splitted_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nb">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">ch&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">splitted_str&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nb">iter&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="nb">iter&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">cipher&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span> &lt;span class="n">cipher&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">splitted_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">encrypt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello-Crypto!&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;Hoy!e-plCtlro&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而事实上，这就是一个栅栏密码，你可以在&lt;a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">这个网站&lt;/a>上尝试。&lt;/p>
&lt;blockquote>
&lt;p>解密过程偷懒不写啦，聪明如你一定能自己figure out!&lt;/p>
&lt;/blockquote>
&lt;p>而这就是古典密码学从最原始的的阶段，步入了近现代的阶段。从一些工具的使用，变成了算数。在此基础上形成了大量的替换密码（如Caesar密码、Vigenère密码）。&lt;/p>
&lt;blockquote>
&lt;p>事实上computer最早的含义是计算员，大多都是一些熟练算术技巧的人来破译密码的，而我们熟知的Alan Turing事实上在二战时也是负责这个工作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="现代密码学">现代密码学&lt;/h2>
&lt;p>现代密码学的开端是Shannon的那篇文章，其中提出了一个重要的概念，完美安全性（Perfect Security）。完美安全性的形式化定义用到了概率论的知识，因此此处不展开。我们仅对其产生的原因进行一些阐述。&lt;/p>
&lt;p>古典密码在当时基本全都被破解了，密码欠缺一个正式的、准确的定义去衡量证明一个密码方案是否具有严格的安全性，因此Shannon理论应运而生。&lt;/p>
&lt;p>一个密码体系保证完美安全性，当其加密后的密文不会透露任何关于明文的信息。而在这种定义下，即使攻击者拥有无穷的算力，也不能被破解。&lt;/p>
&lt;blockquote>
&lt;p>😮注意，是无穷的算力！&lt;/p>
&lt;/blockquote>
&lt;p>但是根据Shannon的推论，一个保证完美安全性的密码体系，其密钥空间一定大于明文空间。也就是说，我的密钥不会比明文更短。而我们可以思考，如果有一个信道，可以安全的用于传输密钥，为什么不直接拿来传输明文呢？因此目前的密码体系都&lt;strong>不保证&lt;/strong>完美安全性。&lt;/p>
&lt;p>而在这基础上，就催生了流密码和分块密码，他们被统称为对称密码学。总的来说，对称密码学致力于让短密钥经过一些神奇的操作，也可以发挥和长密钥相同的作用：&lt;/p>
&lt;ul>
&lt;li>流密码：通过随机数生成器序列，生成长密钥&lt;/li>
&lt;li>分块密码：通过对明文分块，逐一用短密钥加密&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>此处是非常不严谨的表达，仅作为理解&lt;/p>
&lt;/blockquote>
&lt;p>而与之对应的，是非对称密码学（又称为公钥密码学），该类密码体系的特点是拥有公钥和私钥两个密钥，他们往往基于数学上的难题进行规约：&lt;/p>
&lt;ul>
&lt;li>RSA：大数质因数分解难题&lt;/li>
&lt;li>ElGamal：模乘群上的离散对数问题&lt;/li>
&lt;li>ECC-ElGamal：椭圆曲线加法群上的离散对数问题&lt;/li>
&lt;/ul>
&lt;p>一个简单的例子是，给定两个大质数 $p, q$ ，给你他们的乘积 $N = pq$ ，你是很难分别求解出 $p$ 和 $q$ 的。&lt;/p>
&lt;blockquote>
&lt;p>😈试试吧！N = 115157048927615167000080222307830600550443405087336034834570254657109854848846966155326673813367130632850579378687042597345617010423842872052308839845927421052730005967200985762648016655477422221735535543563770813175765249421783025141172284969133662823566566070113584080582203941254237438639149018559749238997&lt;/p>
&lt;/blockquote>
&lt;p>而这种数学上的难解特性就可以被利用，构造密码体系。&lt;/p>
&lt;blockquote>
&lt;p>具体需要一些数论和抽象代数的知识，这里就不展开啦~&lt;/p>
&lt;/blockquote>
&lt;h2 id="小结">小结&lt;/h2>
&lt;p>事实上，上面两个问题都只解决了数据隐秘性的保护，不一定能够保证数据仍是完整的、未被篡改过的。而这就需要更多的知识，包括：&lt;/p>
&lt;ul>
&lt;li>消息认证码&lt;/li>
&lt;li>数字签名&lt;/li>
&lt;/ul>
&lt;p>而目前随着量子计算机的出现，Shor算法已经从理论上证明了能够在多项式时间内攻破目前常见的密码体系，于是又有了一些后量子密码学的研究：&lt;/p>
&lt;ul>
&lt;li>格密码学&lt;/li>
&lt;li>编码密码学&lt;/li>
&lt;/ul>
&lt;p>当然还有一些和其他方向的交叉，如：&lt;/p>
&lt;ul>
&lt;li>区块链（散列和共识机制）&lt;/li>
&lt;li>安全多方计算（联邦学习）&lt;/li>
&lt;li>零知识证明&lt;/li>
&lt;/ul>
&lt;h2 id="学习路线">学习路线&lt;/h2>
&lt;p>笔者的学习路线是：密码基础-数学基础-现代密码学，比较诡异，下面整理一下比较正常的路线：&lt;/p>
&lt;ol>
&lt;li>数学基础：离散数学、数论、近世代数、概率论&lt;/li>
&lt;li>古典密码学：了解代换密码&lt;/li>
&lt;li>对称密码学：流密码、对称密码、PRG、PRF&lt;/li>
&lt;li>非对称密码学：Diffie-Hellman密钥交换、陷门函数、RSA、ElGamal、同态加密&lt;/li>
&lt;li>应用密码学：哈希函数、消息认证码、数字签名&lt;/li>
&lt;/ol>
&lt;p>推荐一些书目：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.cs.umd.edu/~jkatz/imc.html#:~:text=Introduction%20to%20Modern%20Cryptography%20is%20an%20introductory-level%20treatment,without%20sacrificing%20rigor%20or%20an%20emphasis%20on%20foundations." target="_blank" rel="noopener">Introduction to Modern Cryptography&lt;/a>, Jonathan Katz and Yehuda Lindell&lt;/li>
&lt;li>初等数论, 潘承洞、潘承彪&lt;/li>
&lt;li>抽象代数学, 姚慕生&lt;/li>
&lt;/ul></description></item><item><title>Friend Link</title><link>https://example.com/friend/</link><pubDate>Fri, 17 Jun 2022 00:30:31 +0800</pubDate><guid>https://example.com/friend/</guid><description>&lt;p>The following links are from my friends, you can check their personal page.&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://chasing1020.github.io/" target="_blank" rel="noopener">Chasing&lt;/a>, Gopher, Major in Computer Science, SHU&lt;/p>
&lt;p>&lt;a href="https://siyangshao.github.io/message/" target="_blank" rel="noopener">Shaosy&lt;/a>, ACMer, Major in Computer Engineering, NTU&lt;/p>
&lt;hr></description></item><item><title>Tool</title><link>https://example.com/tool/</link><pubDate>Fri, 17 Jun 2022 00:24:07 +0800</pubDate><guid>https://example.com/tool/</guid><description>&lt;h3 id="shu-导航--shu-re-direction">&lt;strong>SHU 导航&lt;/strong> | SHU Re-direction&lt;/h3>
&lt;hr>
&lt;p>&lt;a href="https://www.shu.edu.cn/" target="_blank" rel="noopener">官网&lt;/a> &lt;a href="http://newmail.shu.edu.cn/" target="_blank" rel="noopener">邮箱&lt;/a> &lt;a href="http://202.120.117.231:8991/F/YP82FYYBJHBUMFXQSY6NRQGC898HCNJVK8M41AQAL1I169KJQG-08364?&amp;amp;pds_handle=GUEST" target="_blank" rel="noopener">书籍查询&lt;/a> &lt;a href="http://www.elearning.shu.edu.cn/portal" target="_blank" rel="noopener">网络课程&lt;/a> &lt;a href="http://pim.shu.edu.cn/taskcenter/home" target="_blank" rel="noopener">PIM&lt;/a> &lt;a href="https://eportal.shu.edu.cn/" target="_blank" rel="noopener">一网通办&lt;/a> &lt;a href="https://xk2.zkllab.com/" target="_blank" rel="noopener">选课助手&lt;/a> &lt;a href="http://www.xk.shu.edu.cn/" target="_blank" rel="noopener">在线选课&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://10.10.9.139/client/cloudPrint.html" target="_blank" rel="noopener">图书馆云打印&lt;/a> &lt;a href="http://acmoj.shu.edu.cn/problems/" target="_blank" rel="noopener">ACM-OJ&lt;/a> &lt;a href="https://www.luogu.com.cn/problem/list" target="_blank" rel="noopener">洛谷&lt;/a> &lt;a href="http://nhce.shu.edu.cn/" target="_blank" rel="noopener">视听说英语平台&lt;/a> &lt;a href="http://www.jwc.shu.edu.cn/2020wangluokongjiananquanzhizhao.pdf" target="_blank" rel="noopener">网安培养方案&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://jwb.shu.edu.cn/" target="_blank" rel="noopener">教务部&lt;/a>&lt;/p>
&lt;h3 id="密码学工具--cryptography-tools">密码学工具 | Cryptography Tools&lt;/h3>
&lt;hr>
&lt;div class="row mt-2"
style="margin-left: 0px;
margin-right: 0px">
&lt;div class="col-12 col-md-6 col-xl-5 card-simple view-card"
style="margin-top: 20px">
&lt;a href="https://www.sagemath.org/index.html">
&lt;img width="250" height="65" alt="SageMath Logo" class="round raised" src="https://picgo-1303220879.cos.ap-shanghai.myqcloud.com//img20230331042448.png" title="SageMath Mathematical Software">
&lt;/a>
&lt;text style="text-align: center"> SageMath: Mathematical Software &lt;/text>
&lt;/div>
&lt;div class="col-12 col-md-6 col-xl-5 card-simple view-card"
style="margin-top: 20px">
&lt;a href="https://www.sagemath.org/index.html">
&lt;img width="65" height="65" alt="SageMath Logo" class="round raised" src="https://pypi.org/static/images/logo-small.2a411bc6.svg" title="SageMath Mathematical Software">
&lt;/a>
&lt;text style="text-align: center"> pycryptodome: Cryptography Library for Python &lt;/text>
&lt;/div>
&lt;/div>
&lt;!-- ### **校园生活** | Campus
***
[一网通办](https://eportal.shu.edu.cn/) [校历](https://www.shu.edu.cn/bzap.jsp?urltype=tree.TreeTempUrl&amp;wbtreeid=1233) [后勤](https://hq.shu.edu.cn/fwzn.htm) [成就](http://www.act.shu.edu.cn/) [网上支付 ](https://pay.shu.edu.cn/SPPMain/) [校园应用](https://eportal.shu.edu.cn/apps/) [空闲教室](https://cj.shu.edu.cn/RoomUse/RoomUseDate/) [地图](http://map.shu.edu.cn/App/MapViewer?starter=001)[博物馆](http://www.museum.shu.edu.cn/index.php) [图书馆](https://lib.shu.edu.cn/)
[孰知 ](http://www.sz.shu.edu.cn/Index.aspx) [电话黄页](https://www.shu.edu.cn/dhcx.htm) [校医院](https://www.xyy.shu.edu.cn/) [财务处](https://xssf.shu.edu.cn:8088/LocalLogin.aspx) [乐乎论坛](http://bbs.lehu.shu.edu.cn/) [学生社区管理](http://www.sq.shu.edu.cn/) [通知公告](https://zdpyc.shu.edu.cn/tzgglist.jsp?urltype=tree.TreeTempUrl&amp;wbtreeid=1014) [专业信息公开](http://zyinfo.shu.edu.cn/)
### **课程学习** | Curriculum
***
[网络课程](http://www.elearning.shu.edu.cn/portal) [泛雅(学习通网页版)](http://passport2.chaoxing.com/login?refer=http%3A%2F%2Fmooc2-ans.chaoxing.com%2Fmycourse%2Fstu%3Fcourseid%3D214190837%26clazzid%3D31605024%26cpi%3D147391051%26enc%3D520ea1039b791b4c16d2ae13d4f6f683%26t%3D1598976159741%26pageHeader%3D0&amp;fid=145&amp;newversion=true) [成绩查询](http://cj.shu.edu.cn/) [网络选课](http://www.xk.shu.edu.cn/) [选课助手](https://xk2.zkllab.com/) [英语四六级](http://cet-bm.neea.edu.cn/)
[计算机等级考](https://eportal.shu.edu.cn/transfer/#id=174) [转专业申请](https://zzy.shu.edu.cn/) [知识机构库](http://ir.shu.edu.cn/) [学术报告](https://eportal.shu.edu.cn/calendar/#type=1062) [安全教育(安开)](http://ankai365.shu.edu.cn/) [易班](http://www.yiban.cn/school/index/id/5000022)
[英语平台 ](http://nhce.shu.edu.cn/) [课程资源网站](http://class.cc.shu.edu.cn/) [教务处](http://www.jwc.shu.edu.cn/) [直录播云平台 ](http://vod.cc.shu.edu.cn/) [CG辅助教学](http://cg.hoc.ccshu.net/)
### **网络相关** | Network
***
[VPN](https://vpn.shu.edu.cn/) [无线网络](https://wlan.shu.edu.cn/) [IPv6](https://ipv6.shu.edu.cn/) [电脑软件](https://its.shu.edu.cn/xzzq.htm) [信息化系统](http://services.shu.edu.cn/) [PIM](http://pim.shu.edu.cn/taskcenter/home) [开源社区](http://osc.shu.edu.cn/) --></description></item><item><title>An example conference paper</title><link>https://example.com/publication/example/</link><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid>https://example.com/publication/example/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title/><link>https://example.com/admin/config.yml</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/admin/config.yml</guid><description/></item></channel></rss>